import React, { useEffect, useState } from 'react';
import { Card, Col, Divider, message, Modal, Row, Typography } from 'antd';
import { Form, FormItem, Button, Column } from '@react-hangar/antd-components';
import { useStore } from '@scripty/react-store';
import { charsetTypeOptions, contentTypeOptions, statusOptions } from './options';
import { getCategoryOptions, getMockServiceUrl } from './helper'
import { useParams } from 'react-router';
import { Path } from './Path';
import { nanoid } from 'nanoid';

export const NewMock = () => {
    const { mockStore } = useStore('mockStore');
    const { categoriesStore } = useStore('categoriesStore');
    const [visible, setVisible] = useState(false);
    const updated = mockStore.getUpdatedRecords();
    const categoriesRecords = categoriesStore.getRecords();
    const categoryOptions = getCategoryOptions(categoriesRecords[0].list);
    const { Text } = Typography;
    const records = mockStore.getRecords();
    const params = useParams();

    useEffect(() => {
        if (params) {
            const path = window.location.pathname.replace('/mock-edit/', '');
            const parameter = window.location.search;
            mockStore.getProxy().search({ query: path + parameter })
        }
    }, []);

    useEffect(() => {
        categoriesStore.getProxy().read({})
    }, []);

    const initialRecord = {
        title: '',
        category: '',
        status: 200,
        contentType: 'application/json',
        charset: 'UTF-8'
    }

    const handleSubmit = async (data, form) => {
        try {

            if (form.headers) {
                form.headers = JSON.parse(form.headers);
            }
            if (form.requestBody) {
                form.requestBody = JSON.parse(form.requestBody);
            }

            if (form.path !== '') {
                form.path = {
                    path: '/' + nanoid(),
                    isAutoGenerated: true
                };
            }
            await mockStore.getProxy().update({ ...form });
            setVisible(true);
        } catch (e) {
            message.error('headers must be an object');
        }
    };

    const onModalOkBtnClick = () => {
        setVisible(false);
    }

    const onModalCancelBtnClick = () => {
        setVisible(false);
    }
    const sizedContent = {
        xs: { span: 24, offset: 0 }, xl: { span: 18, offset: 3 }
    };

    const inlineStyled = {
        padding: 5, display: 'inline-block', width: 'calc(50%)'
    }

    return (
        <Row>
            <Col {...sizedContent} >
                <Card title={'Design Mock'}>
                    <Form onSubmit={handleSubmit} record={(params && records.length === 1) ? records[0] : initialRecord}>
                        <FormItem fieldType={'string'} label='Title' dataIndex={'title'}
                                  style={inlineStyled}
                        />

                        <FormItem fieldType={'select'} label='Category' dataIndex={'category'}
                                  style={inlineStyled} fieldProps={{ options: categoryOptions }}/>

                        <Divider>Request</Divider>

                        <FormItem label='Request Path' dataIndex={'path'}
                                  fieldProps={{placeholder: '/yourpath/api/?myparams=1234&awesome=5678'}}
                        >
                            <Path />
                        </FormItem>

                        <FormItem fieldType={'object'} label='Request Headers' dataIndex={'requestHeaders'} style={inlineStyled}/>

                        <FormItem fieldType={'object'} label='Request Body' dataIndex={'requestBody'} style={inlineStyled}/>

                        <Divider>Response</Divider>

                        <FormItem fieldType={'select'} label='HTTP Status' dataIndex={'status'}
                                  fieldProps={{options: statusOptions}} required style={inlineStyled}/><br />

                        <FormItem fieldType={'select'} label='ContentType' dataIndex={'contentType'}
                                  fieldProps={{ options: contentTypeOptions }} required style={inlineStyled}/>

                        <FormItem fieldType={'select'} label='Charset' dataIndex={'charset'}
                                  fieldProps={{ options: charsetTypeOptions }} required style={inlineStyled}/>

                        <FormItem fieldType={'object'} label='Response Headers' dataIndex={'headers'} style={inlineStyled}/>

                        <FormItem fieldType={'object'} label='Response Body' dataIndex={'response'} style={inlineStyled}/>

                        <Button htmlType="submit" icon={'save'}> Save </Button>

                        <Modal
                            title={'Mock is ready:'}
                            visible={visible}
                            width={600}
                            onOk={onModalOkBtnClick}
                            onCancel={onModalCancelBtnClick}
                            onClose={onModalCancelBtnClick}
                        >
                            <Text style={{ fontSize: 18 }} copyable code>
                                {getMockServiceUrl((updated && typeof updated.path !== 'undefined') ? updated.path.path : '')}
                            </Text>
                        </Modal>
                    </Form>
                </Card>
            </Col>
        </Row>
    );
};
